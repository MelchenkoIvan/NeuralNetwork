// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeuralNetworkDatabase;

#nullable disable

namespace NeuralNetworkDatabase.Migrations
{
    [DbContext(typeof(NeuralNetworkDbContext))]
    [Migration("20230506184611_Symptoms")]
    partial class Symptoms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NeuralNetworkDatabase.Entities.Symptoms", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomId"));

                    b.Property<double>("Age")
                        .HasColumnType("float");

                    b.Property<double>("Ca")
                        .HasColumnType("float");

                    b.Property<double>("Chol")
                        .HasColumnType("float");

                    b.Property<double>("Cp")
                        .HasColumnType("float");

                    b.Property<double>("Exang")
                        .HasColumnType("float");

                    b.Property<double>("Fbs")
                        .HasColumnType("float");

                    b.Property<int>("NNType")
                        .HasColumnType("int");

                    b.Property<double>("Oldpeak")
                        .HasColumnType("float");

                    b.Property<double>("Restecg")
                        .HasColumnType("float");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<double>("Sex")
                        .HasColumnType("float");

                    b.Property<double>("Slope")
                        .HasColumnType("float");

                    b.Property<double>("Thal")
                        .HasColumnType("float");

                    b.Property<double>("Thalach")
                        .HasColumnType("float");

                    b.Property<double>("Trestbps")
                        .HasColumnType("float");

                    b.Property<int>("UserIdentity")
                        .HasColumnType("int");

                    b.HasKey("SymptomId");

                    b.HasIndex("UserIdentity");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("NeuralNetworkDatabase.Entities.User", b =>
                {
                    b.Property<int>("UserIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserIdentity"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserIdentity");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NeuralNetworkDatabase.Entities.Symptoms", b =>
                {
                    b.HasOne("NeuralNetworkDatabase.Entities.User", "User")
                        .WithMany("Symptoms")
                        .HasForeignKey("UserIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeuralNetworkDatabase.Entities.User", b =>
                {
                    b.Navigation("Symptoms");
                });
#pragma warning restore 612, 618
        }
    }
}
